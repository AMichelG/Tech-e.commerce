// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?
  name          String?
  image         String?
  emailVerified DateTime? @map("email_verified")
  active        Boolean   @default(true)
  role          Role      @default(USER)
  sales         Sale[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Sale {
  id          Int          @id @default(autoincrement())
  total       Int
  date        DateTime
  state       State        @default(PENDING)
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  saleDetails SaleDetail[]
}

model SaleDetail {
  id        Int    @id @default(autoincrement())
  amount    Int
  price     Int
  idProduct String
  sale      Sale   @relation(fields: [saleId], references: [id])
  saleId    Int
}

enum Role {
  USER
  MOD
  ADMIN
}

enum State {
  PENDING
  SUCCESSFUL
  FAILURE
}
